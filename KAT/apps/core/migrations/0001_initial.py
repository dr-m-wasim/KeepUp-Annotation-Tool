# Generated by Django 4.2.16 on 2025-05-10 12:26

import django.db.models.deletion
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Comments",
            fields=[
                ("comment_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "post_id",
                    models.IntegerField(blank=True, db_column="post-id", null=True),
                ),
                ("commenttext", models.TextField(blank=True, null=True)),
                (
                    "commenter_name",
                    models.TextField(blank=True, db_column="commenter name", null=True),
                ),
                (
                    "likescount_on_comment",
                    models.TextField(
                        blank=True, db_column="likescount on comment", null=True
                    ),
                ),
                (
                    "comment_label",
                    models.TextField(blank=True, db_column="comment label", null=True),
                ),
                (
                    "label",
                    models.TextField(blank=True, db_column="final_label", null=True),
                ),
                (
                    "annotatorOne_comment_label",
                    models.TextField(
                        blank=True, db_column="annotatorOne_comment_label", null=True
                    ),
                ),
                (
                    "annotatorTwo_comment_label",
                    models.TextField(
                        blank=True, db_column="annotatorTwo_comment_label", null=True
                    ),
                ),
                (
                    "annotatorThree_comment_label",
                    models.TextField(
                        blank=True, db_column="annotatorThree_comment_label", null=True
                    ),
                ),
            ],
            options={
                "db_table": "comments",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Events",
            fields=[
                (
                    "student_id",
                    models.FloatField(blank=True, db_column="student id", null=True),
                ),
                (
                    "student_name",
                    models.TextField(blank=True, db_column="Student name", null=True),
                ),
                (
                    "event_id",
                    models.TextField(
                        blank=True,
                        db_column="Event-id",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_name",
                    models.TextField(blank=True, db_column="Event Name", null=True),
                ),
                ("claim", models.CharField(max_length=500)),
                (
                    "claim_url",
                    models.TextField(blank=True, db_column="claim-url", null=True),
                ),
                ("posturl", models.TextField(blank=True, null=True)),
                ("label", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "Events",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="UserFeatures",
            fields=[
                (
                    "post_id",
                    models.IntegerField(
                        blank=True,
                        db_column="post-id",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("username", models.TextField(blank=True, null=True)),
                ("followers", models.TextField(blank=True, null=True)),
                ("followings", models.TextField(blank=True, null=True)),
                (
                    "is_user_verified_0_verified_1_unverified_field",
                    models.IntegerField(
                        blank=True,
                        db_column="is user verified(0 verified, 1 unverified)",
                        null=True,
                    ),
                ),
                (
                    "profile_pic_url",
                    models.TextField(
                        blank=True, db_column="profile pic url", null=True
                    ),
                ),
                (
                    "posts_count",
                    models.TextField(blank=True, db_column="posts count", null=True),
                ),
                (
                    "joining_date",
                    models.TextField(blank=True, db_column="joining date", null=True),
                ),
            ],
            options={
                "db_table": "user_features",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="PostFeatures",
            fields=[
                (
                    "post_id",
                    models.IntegerField(
                        blank=True,
                        db_column="post-id",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "post_url",
                    models.TextField(blank=True, db_column="post-url", null=True),
                ),
                ("platform", models.TextField(blank=True, null=True)),
                (
                    "post_title",
                    models.TextField(blank=True, db_column="post-title", null=True),
                ),
                (
                    "post_label",
                    models.TextField(blank=True, db_column="post-label", null=True),
                ),
                (
                    "image_image_0_video_1_if_no_image_video_2_field",
                    models.IntegerField(
                        blank=True,
                        db_column="image(image 0, video 1, if no image video 2)",
                        null=True,
                    ),
                ),
                ("likescount", models.TextField(blank=True, null=True)),
                ("timestamp", models.TextField(blank=True, null=True)),
                ("commentscount", models.TextField(blank=True, null=True)),
                ("views", models.TextField(blank=True, null=True)),
                ("shares", models.TextField(blank=True, null=True)),
                ("reposts", models.TextField(blank=True, null=True)),
                (
                    "annotatorOne_post_label",
                    models.TextField(
                        blank=True, db_column="annotatorOne_post_label", null=True
                    ),
                ),
                (
                    "annotatorTwo_post_label",
                    models.TextField(
                        blank=True, db_column="annotatorTwo_post_label", null=True
                    ),
                ),
                (
                    "annotatorThree_post_label",
                    models.TextField(
                        blank=True,
                        db_column="annotatorThree_post_label",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "final_label",
                    models.TextField(blank=True, db_column="final_label", null=True),
                ),
                (
                    "event",
                    models.ForeignKey(
                        db_column="Event-id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="core.events",
                    ),
                ),
            ],
            options={
                "db_table": "post_features",
                "managed": True
            },
