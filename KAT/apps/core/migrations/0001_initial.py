<<<<<<< HEAD
# Generated by Django 4.2.16 on 2025-05-10 12:26
=======
# Generated by Django 5.2 on 2025-05-09 06:11
>>>>>>> 9de90cfcffcc4e4b24aca63eed9e9c2a98b21847

import django.db.models.deletion
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Comments",
            fields=[
                ("comment_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "post_id",
                    models.IntegerField(blank=True, db_column="post-id", null=True),
                ),
                ("commenttext", models.TextField(blank=True, null=True)),
                (
                    "commenter_name",
                    models.TextField(blank=True, db_column="commenter name", null=True),
                ),
                (
                    "likescount_on_comment",
                    models.TextField(
                        blank=True, db_column="likescount on comment", null=True
                    ),
                ),
                (
                    "comment_label",
                    models.TextField(blank=True, db_column="comment label", null=True),
                ),
                (
                    "label",
                    models.TextField(blank=True, db_column="final_label", null=True),
                ),
                (
                    "annotatorOne_comment_label",
                    models.TextField(
                        blank=True, db_column="annotatorOne_comment_label", null=True
                    ),
                ),
                (
                    "annotatorTwo_comment_label",
                    models.TextField(
                        blank=True, db_column="annotatorTwo_comment_label", null=True
                    ),
                ),
                (
                    "annotatorThree_comment_label",
                    models.TextField(
                        blank=True, db_column="annotatorThree_comment_label", null=True
                    ),
                ),
            ],
            options={
                "db_table": "comments",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Events",
            fields=[
                (
                    "student_id",
                    models.FloatField(blank=True, db_column="student id", null=True),
                ),
                (
                    "student_name",
                    models.TextField(blank=True, db_column="Student name", null=True),
                ),
                (
                    "event_id",
                    models.TextField(
                        blank=True,
                        db_column="Event-id",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_name",
                    models.TextField(blank=True, db_column="Event Name", null=True),
                ),
                ("claim", models.CharField(max_length=500)),
                (
                    "claim_url",
                    models.TextField(blank=True, db_column="claim-url", null=True),
                ),
                ("posturl", models.TextField(blank=True, null=True)),
                ("label", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "Events",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="UserFeatures",
            fields=[
                (
                    "post_id",
                    models.IntegerField(
                        blank=True,
                        db_column="post-id",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("username", models.TextField(blank=True, null=True)),
                ("followers", models.TextField(blank=True, null=True)),
                ("followings", models.TextField(blank=True, null=True)),
                (
                    "is_user_verified_0_verified_1_unverified_field",
                    models.IntegerField(
                        blank=True,
                        db_column="is user verified(0 verified, 1 unverified)",
                        null=True,
                    ),
                ),
                (
                    "profile_pic_url",
                    models.TextField(
                        blank=True, db_column="profile pic url", null=True
                    ),
                ),
                (
                    "posts_count",
                    models.TextField(blank=True, db_column="posts count", null=True),
                ),
                (
                    "joining_date",
                    models.TextField(blank=True, db_column="joining date", null=True),
                ),
            ],
            options={
                "db_table": "user_features",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="PostFeatures",
            fields=[
                (
                    "post_id",
                    models.IntegerField(
                        blank=True,
                        db_column="post-id",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "post_url",
                    models.TextField(blank=True, db_column="post-url", null=True),
                ),
                ("platform", models.TextField(blank=True, null=True)),
                (
                    "post_title",
                    models.TextField(blank=True, db_column="post-title", null=True),
                ),
                (
                    "post_label",
                    models.TextField(blank=True, db_column="post-label", null=True),
                ),
                (
                    "image_image_0_video_1_if_no_image_video_2_field",
                    models.IntegerField(
                        blank=True,
                        db_column="image(image 0, video 1, if no image video 2)",
                        null=True,
                    ),
                ),
                ("likescount", models.TextField(blank=True, null=True)),
                ("timestamp", models.TextField(blank=True, null=True)),
                ("commentscount", models.TextField(blank=True, null=True)),
                ("views", models.TextField(blank=True, null=True)),
                ("shares", models.TextField(blank=True, null=True)),
                ("reposts", models.TextField(blank=True, null=True)),
                (
                    "annotatorOne_post_label",
                    models.TextField(
                        blank=True, db_column="annotatorOne_post_label", null=True
                    ),
                ),
                (
                    "annotatorTwo_post_label",
                    models.TextField(
                        blank=True, db_column="annotatorTwo_post_label", null=True
                    ),
                ),
                (
                    "annotatorThree_post_label",
                    models.TextField(
                        blank=True,
                        db_column="annotatorThree_post_label",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "final_label",
                    models.TextField(blank=True, db_column="final_label", null=True),
                ),
                (
                    "event",
                    models.ForeignKey(
                        db_column="Event-id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="core.events",
                    ),
                ),
            ],
            options={
<<<<<<< HEAD
                "db_table": "post_features",
                "managed": True,
=======
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
                ('action_time', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('comment_id', models.AutoField(primary_key=True, serialize=False)),
                ('post_id', models.IntegerField(blank=True, db_column='post-id', null=True)),
                ('commenttext', models.TextField(blank=True, null=True)),
                ('commenter_name', models.TextField(blank=True, db_column='commenter name', null=True)),
                ('likescount_on_comment', models.FloatField(blank=True, db_column='likescount on comment', null=True)),
                ('comment_label', models.CharField(blank=True, db_column='comment label', max_length=13, null=True)),
                ('label', models.CharField(blank=True, db_column='final_label', max_length=8, null=True)),
                ('annotatorOne_comment_label', models.TextField(blank=True, db_column='annotatorOne_comment_label', null=True)),
                ('annotatorTwo_comment_label', models.TextField(blank=True, db_column='annotatorTwo_comment_label', null=True)),
                ('annotatorThree_comment_label', models.TextField(blank=True, db_column='annotatorThree_comment_label', null=True)),
            ],
            options={
                'db_table': 'comments',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('student_id', models.FloatField(blank=True, db_column='student id', null=True)),
                ('student_name', models.TextField(blank=True, db_column='Student name', null=True)),
                ('event_id', models.TextField(db_column='Event-id', default='0', primary_key=True, serialize=False)),
                ('event_name', models.TextField(blank=True, db_column='Event Name', null=True)),
                ('claim', models.CharField(default='No claim', max_length=500)),
                ('claim_url', models.TextField(blank=True, db_column='claim-url', null=True)),
                ('posturl', models.TextField(blank=True, null=True)),
                ('label', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Events',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserFeatures',
            fields=[
                ('post_id', models.IntegerField(db_column='post-id', default=0, primary_key=True, serialize=False)),
                ('username', models.TextField(blank=True, null=True)),
                ('followers', models.TextField(blank=True, null=True)),
                ('followings', models.TextField(blank=True, null=True)),
                ('is_user_verified_0_verified_1_unverified_field', models.IntegerField(blank=True, db_column='is user verified(0 verified, 1 unverified)', null=True)),
                ('profile_pic_url', models.TextField(blank=True, db_column='profile pic url', null=True)),
                ('posts_count', models.TextField(blank=True, db_column='posts count', null=True)),
                ('joining_date', models.TextField(blank=True, db_column='joining date', null=True)),
            ],
            options={
                'db_table': 'user_features',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PostFeatures',
            fields=[
                ('post_id', models.IntegerField(db_column='post-id', default=0, primary_key=True, serialize=False)),
                ('post_url', models.TextField(blank=True, db_column='post-url', null=True)),
                ('platform', models.TextField(blank=True, null=True)),
                ('post_title', models.TextField(blank=True, db_column='post-title', null=True)),
                ('post_label', models.CharField(blank=True, db_column='post-label', max_length=10, null=True)),
                ('image_image_0_video_1_if_no_image_video_2_field', models.IntegerField(blank=True, db_column='image(image 0, video 1, if no image video 2)', null=True)),
                ('likescount', models.CharField(blank=True, max_length=10, null=True)),
                ('timestamp', models.TextField(blank=True, null=True)),
                ('commentscount', models.IntegerField(blank=True, null=True)),
                ('views', models.CharField(blank=True, max_length=10, null=True)),
                ('shares', models.CharField(blank=True, max_length=6, null=True)),
                ('reposts', models.CharField(blank=True, max_length=7, null=True)),
                ('annotatorOne_post_label', models.CharField(blank=True, db_column='annotatorOne_post_label', max_length=23, null=True)),
                ('annotatorTwo_post_label', models.CharField(blank=True, db_column='annotatorTwo_post_label', max_length=23, null=True)),
                ('annotatorThree_post_label', models.CharField(blank=True, db_column='annotatorThree_post_label', max_length=25, null=True)),
                ('final_label', models.CharField(blank=True, db_column='final_label', max_length=8, null=True)),
                ('event', models.ForeignKey(db_column='Event-id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='core.events')),
            ],
            options={
                'db_table': 'post_features',
                'managed': True,
>>>>>>> 9de90cfcffcc4e4b24aca63eed9e9c2a98b21847
            },
        ),
    ]
